<?xml version="1.0" encoding="UTF-8"?>
<Deployer xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="11.6" xsi:noNamespaceSchemaLocation="schemas/deployer-conf.xsd" LegacyTransport="false">
    <Pipelines>
        <Pipeline Id="Tridion-Bootstrap" Action="TridionBootstrap" Verb="Content,Prepare,Commit,Rollback">
            <Steps>
                <Step Id="TridionUnzipStep"/>
            </Steps>
        </Pipeline>
        <Pipeline Id="Tridion-Wait" Action="Deploy,Undeploy" Verb="Wait">
            <Steps>
                <Step Id="TridionWaitStep"/>
            </Steps>
        </Pipeline>
        <Pipeline Id="Tridion-Process-Deploy" Action="Deploy" Verb="Process">
            <Steps>
                <Step Id="SchemaDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.SchemaDeploy" Type="SchemaDeploy"/>
                </Step>
                <Step Id="PageDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.PageDeploy" Type="PageDeploy">
                        <Transformer Class="com.tridion.transformer.TCDLDefaultTransformer"/>
                    </Module>
                </Step>
                <Step Id="BinaryDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.BinaryDeploy" Type="BinaryDeploy"/>
                </Step>
                <Step Id="ComponentDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.ComponentDeploy" Type="ComponentDeploy"/>
                </Step>
                <Step Id="TemplateDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.TemplateDeploy" Type="TemplateDeploy"/>
                </Step>
                <Step Id="PublicationDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.PublicationDeploy" Type="PublicationDeploy"/>
                </Step>
                <Step Id="TaxonomyDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.TaxonomyDeploy" Type="TaxonomyDeploy"/>
                </Step>
                <Step Id="ComponentPresentationDeploy"
                      Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.ComponentPresentationDeploy"
                            Type="ComponentPresentationDeploy">
                        <Transformer Class="com.tridion.transformer.TCDLDefaultTransformer"/>
                    </Module>
                </Step>
                <Step Id="StructureGroupDeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.StructureGroupDeploy" Type="StructureGroupDeploy"/>
                </Step>
                <Step Id="TridionContentDataStep"/>
                <Step Id="TridionSearchIndexDeployStep">
                    <BinaryIndexing extensions="${binaryextension:-pdf,doc,docx,xls,xlsx,ppt,pptx,odt}"/>
                    <!--
                     If set to true and a fatal indexing error (which is defined as a fatal exception causing none
                     of the items being able to be indexed) occurs, the entire transaction will
                     be aborted. If set to false, the deployment and overall transactions of the previous steps
                     will go through normally.
                    -->
                    <Transaction
                            failPipelineTransactionOnFatalIndexingError="${failtransactiononfatalindexingerror:-true}"/>
                    <RetryPoint PipelineId="Tridion-Process-Deploy" StepId="TridionSearchIndexDeployStep"/>
                </Step>
            </Steps>
        </Pipeline>
        <Pipeline Id="Tridion-Process-Undeploy" Action="Undeploy" Verb="Process">
            <Steps>
                <Step Id="PageUndeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.PageUndeploy" Type="PageUndeploy"/>
                </Step>
                <Step Id="ComponentPresentationUndeploy"
                      Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.ComponentPresentationUndeploy"
                            Type="ComponentPresentationUndeploy"/>
                </Step>
                <Step Id="TaxonomyUndeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.TaxonomyUndeploy" Type="TaxonomyUndeploy"/>
                </Step>
                <Step Id="StructureGroupUndeploy"
                      Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.StructureGroupUndeploy" Type="StructureGroupUndeploy"/>
                </Step>
                <Step Id="ComponentUndeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.ComponentUndeploy" Type="ComponentUndeploy"/>
                </Step>
                <Step Id="PublicationUndeploy" Factory="com.sdl.delivery.deployer.steps.TridionExecutableStepFactory">
                    <Module Class="com.tridion.deployer.modules.PublicationUndeploy" Type="PublicationUndeploy"/>
                </Step>
                <Step Id="TridionContentDataStep"/>
                <Step Id="TridionSearchIndexUnDeployStep">
                    <!--
                         If set to true and a fatal indexing error (which is defined as a fatal exception causing none
                         of the items being able to be delete/update) occurs, the entire transaction will
                         be aborted. If set to false, the deployment and overall transactions of the previous steps
                         will go through normally.
                        -->
                    <Transaction
                            failPipelineTransactionOnFatalIndexingError="${failtransactiononfatalindexingerror:-true}"/>
                    <!--
                         There are 2 scenarios for delete/update from ES:
                         - All delete/update operations finished successfully.
                           This means response is OK and no conflicts/failures occurred. Deleted/updated documents could be 0 or more.
                           In this case we successfully finish execution and commit transaction.
                         - Any or all delete/update operations failed.
                           This means that operation response code is other then 200 or there were conflicts/failures on ES but not any document was deleted/updated.
                           In this case exception is thrown and retry mechanism steps in.
                           If after all retries we still have failures and did not delete/update any documents - we rollback transaction and fail execution.
                        -->
                    <RetryPoint PipelineId="Tridion-Process-Undeploy" StepId="TridionSearchIndexUnDeployStep"/>
                </Step>
            </Steps>
        </Pipeline>
        <Pipeline Id="Tridion-PreCommit-TX" Action="Deploy,Undeploy" Verb="PreCommit">
            <Steps>
                <Step Id="TridionPreCommitStep"/>
            </Steps>
        </Pipeline>
        <Pipeline Id="Tridion-Commit-TX" Action="Deploy,Undeploy" Verb="Commit">
            <Steps>
                <Step Id="TridionCommitStep">
                    <RetryPoint PipelineId="Tridion-PreCommit-TX" StepId="TridionPreCommitStep"/>
                </Step>
            </Steps>
        </Pipeline>
        <Pipeline Id="Tridion-Rollback-TX" Action="Deploy,Undeploy" Verb="Rollback">
            <Steps>
                <Step Id="TridionRollbackStep"/>
            </Steps>
        </Pipeline>
        <Pipeline Finalize="true" Id="Tridion-Cleanup" Action="Deploy,Undeploy" Verb="*">
            <Steps>
                <Step Id="TridionCleanupStep"/>
            </Steps>
        </Pipeline>
    </Pipelines>

    <!-- Binary Storage configuration -->
    <BinaryStorage Id="PackageStorage" Adapter="FileSystem">
        <Property Name="Path" Value="BINARY_PATH"/>
    </BinaryStorage>

    <!--
        Redis Binary Storage configuration.
        Password is not supported by Amazon ElastiCache.
     -->
    <!--
    <BinaryStorage Id="RedisStorage" Adapter="RedisBlobStorage">
        <Property Name="Host" Value="${storageHost}"/>
        <Property Name="Port" Value="${storagePort}"/>
        <Property Name="Password" Value="encrypted:HzfQh9wYwAKShDxCm4DnnBnysAz9PtbDMFXMbPszSVY="/>
        <Property Name="Timeout" Value="20000"/>
    </BinaryStorage>
    -->

    <!-- State store configuration -->

    <!--
        Configuration example for MSSQL Database
           The Storage element specifies database settings for Deployer State Store Database.
           For the MSSQL the minimum set of properties are:
               host: name of the server that hosts the database
               port: port number (default 1433) used for TCP/IP connections to the database
               database: name of the database to access
               user: username used to access the database
               password: password used to access the database

           (Optional)
           Also, for MSSQL we support extended connection properties that are related to MSSQL.
           For example:
           <Property Name="encrypt" Value="true"/>

           In this particular case, MSSQL will specify SSL encryption for all the data sent between
           the client and the server if the server has a certificate installed.
           You are able to specify as much extended properties as you want.

    <State>
        <Storage Adapter="mssql" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" >
            <Property Name="host" Value="${dbhost}"/>
            <Property Name="port" Value="1433"/>
            <Property Name="database" Value="${dbname}"/>
            <Property Name="user" Value="${dbuser}"/>
            <Property Name="password" Value="${dbpassword:-*HIDDEN*}"/>
        </Storage>
    </State>

    -->

    <!--
        Configuration example for Oracle SQL Database
           The Storage element specifies database settings for Deployer State Store Database.
           For the Oracle SQL the minimum set of properties are:
               host: name of the server that hosts the database
               port: port number (default 1521) used for TCP/IP connections to the database
               database: name of the database to access (SID name)
               serviceName: service name of the database (Service name - should be commented if you use SID)
               user: username used to access the database
               password: password used to access the database

           Currently, we are not supporting extended connection properties for Oracle SQL Database.

    <State>
        <Storage Adapter="oracle" driver="oracle.jdbc.driver.OracleDriver">
            <Property Name="host" Value="${dbhost}"/>
            <Property Name="port" Value="1521"/>
            <Property Name="serviceName" Value="${dbservicename}"/>
            <Property Name="database" Value="${dbname}"/>
            <Property Name="user" Value="${dbuser}"/>
            <Property Name="password" Value="${dbpassword:-*HIDDEN*}"/>
        </Storage>
    </State>

    -->

    <State>
        <Storage Adapter="mssql" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver">
            <Property Name="host" Value="DEPLOYER_STATE_DEFAULT_SERVER_NAME"/>
            <Property Name="port" Value="DEPLOYER_STATE_DEFAULT_PORT_NUMBER"/>
            <Property Name="database" Value="DEPLOYER_STATE_DEFAULT_DATABASE_NAME"/>
            <Property Name="user" Value="DEPLOYER_STATE_DEFAULT_USER"/>
            <Property Name="password" Value="DEPLOYER_STATE_DEFAULT_PASSWORD"/>
        </Storage>
    </State>

    <!-- Queues configuration -->
    <Queues>

        <!--
           Queues default configuration for Filesystem.
           Properties:
               Destination: folder path to store queue messages.
               Workers: optional property to set number of workers.
       -->
        <Queue Default="true" Verbs="Content" Adapter="FileSystem" Id="${contentqueuename:-ContentQueue}">
            <Property Name="Destination" Value="QUEUE_PATH"/>
            <!-- <Property Name="Workers" Value="11"/> -->
        </Queue>
        <Queue Verbs="Commit,Rollback" Adapter="FileSystem" Id="${commitqueuename:-CommitQueue}">
            <Property Name="Destination" Value="QUEUE_PATH/FinalTX"/>
            <!-- <Property Name="Workers" Value="11"/> -->
        </Queue>
        <Queue Verbs="Prepare" Adapter="FileSystem" Id="${preparequeuename:-PrepareQueue}">
            <Property Name="Destination" Value="QUEUE_PATH/Prepare"/>
            <!-- <Property Name="Workers" Value="11"/> -->
        </Queue>

        <!--
             Queues default adapter configuration for FileSystem.
             Properties:
                 LocationPollingInterval: optional property to set polling interval
        -->
        <Adapter Id="FileSystem">
            <!-- <Property Name="LocationPollingInterval" Value="2000"/> -->
        </Adapter>

        <!--
            Queues default configuration for JMS.
            Properties:
                Workers: optional property to set number of workers.
        -->
        <!--
        <Queue Default="true" Verbs="Content" Adapter="JMS" Id="${contentqueuename:-ContentQueue}">
            <Property Name="Workers" Value="10"/>
            </Queue>
        <Queue Verbs="Commit,Rollback" Adapter="JMS" Id="${commitqueuename:-CommitQueue}">
            <Property Name="Workers" Value="10"/>
            </Queue>
        <Queue Verbs="Prepare" Adapter="JMS" Id="${preparequeuename:-PrepareQueue}">
            <Property Name="Workers" Value="10"/>
            </Queue>
        -->

        <!--
            ActiveMQ default adapter configuration for JMS.
            Properties:
                JMSConnectionFactoryBuilderClass: class to create ActiveMQ connection factory.
                JMSUri: ActiveMQ URL.
                Username and Password: required for remote ActiveMQ connection.
                ReceiveTimeout: optional property to fine tune queue sensitivity. Put the value in milliseconds.
                PoolingRestartDelay: optional property to set a polling restart delay if monitoring was failed.
        -->
        <!--
            <Adapter Id="JMS">
                <Property Name="JMSConnectionFactoryBuilderClass"
                          Value="com.sdl.delivery.spring.configuration.jms.ActiveMQConnectionFactoryBuilder" />
                <Property Name="JMSUri" Value="${queueurl:-tcp://activemq-host:port}" />

                <Property Name="Username" Value="admin"/>
                <Property Name="Password" Value="admin"/>
                <Property Name="ReceiveTimeout" Value="200"/>
                <Property Name="PoolingRestartDelay" Value="5m"/>
            </Adapter>
        -->

        <!-- Workers configuration properties -->
        <Workers>
            <!-- Optional configuration properties
            <Property Name="QueuePollingInterval" Value="2s"/>
            <Property Name="RetriesInterval" Value="100ms"/>
            <Property Name="MaxRetries" Value="11"/>
            <Property Name="Cleanup" Value="true"/> -->
        </Workers>
    </Queues>
    <!-- RMI Channel Port -->
    <!--
        <RMIChannel ListenerPort="1050"/>
    -->

</Deployer>
